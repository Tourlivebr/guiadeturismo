---
// Dados dos passeios baseados na imagem
const passeios = [
  {
    id: 1,
    titulo: "Cristais de Gramado",
    subtitulo: "Ingresso",
    categoria: "INGRESSOS E ATRAÇÕES",
    imagem: "/images/cristais_de_gramado_o_inquestionavel.jpg",
    avaliacao: 4.67,
    totalAvaliacoes: 6,
    preco: 6.50,
    parcelas: 6,
    slug: "cristais-de-gramado",
    tags: [
      "Melhor fábrica de cristal Murano",
      "Tour ao vivo da produção artística",
      "Espetáculo 'A Voz do Cristal'"
    ]
  },
  {
    id: 2,
    titulo: "Grupo Dreams",
    subtitulo: "Passaporte para 7 Atrações",
    categoria: "INGRESSOS E ATRAÇÕES",
    imagem: "/images/grupo-dreams-passaporte.jpg",
    avaliacao: 4.01,
    totalAvaliacoes: 10,
    preco: 48.32,
    parcelas: 6,
    slug: "grupo-dreams",
    tags: [
      "8 atrações imperdíveis aqui",
      "Espaços interativos para selfies",
      "Cenários românticos para casais"
    ]
  },
  {
    id: 3,
    titulo: "Ingresso Selfie Gramado",
    subtitulo: "Cenários Instagramáveis",
    categoria: "INGRESSOS E ATRAÇÕES",
    imagem: "/images/gramado_selfie_.webp",
    avaliacao: 0,
    totalAvaliacoes: 0,
    preco: 16.50,
    parcelas: 6,
    slug: "selfie-gramado",
    tags: [
      "São mais de 65 cenários",
      "Seu feed mais interessante"
    ]
  },
  {
    id: 4,
    titulo: "Parque Terra Mágica Florybal",
    subtitulo: "Ingresso",
    categoria: "INGRESSOS E ATRAÇÕES",
    imagem: "/images/terra-magica-florybal.webp",
    avaliacao: 4.57,
    totalAvaliacoes: 7,
    preco: 25.00,
    parcelas: 6,
    slug: "terra-magica-florybal",
    tags: [
      "Dinossauros realistas e sonoros",
      "Cachoeiras e natureza preservada",
      "Trilhas mágicas e temáticas"
    ]
  }
];
---

<section class="relative">
  <!-- Cabeçalho da seção -->
  <div class="text-center mb-12">
    <div class="flex items-center justify-center mb-6">
      <div class="h-px bg-gradient-to-r from-transparent via-primary-400 to-transparent flex-1 max-w-xs"></div>
      <h2 class="text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white mx-8">
        Ingressos e Atrações em <span class="text-primary-600 dark:text-primary-400">Gramado e Canela</span>
      </h2>
      <div class="h-px bg-gradient-to-r from-transparent via-primary-400 to-transparent flex-1 max-w-xs"></div>
    </div>
    
    <!-- Filtros de ordenação -->
    <div class="flex flex-wrap justify-center gap-3 mb-8">
      <span class="text-gray-700 dark:text-gray-300 font-medium">Ordenar por:</span>
      <button class="px-4 py-2 bg-primary-100 text-primary-700 rounded-full text-sm font-medium hover:bg-primary-200 transition-colors">
        Mais vendido
      </button>
      <button class="px-4 py-2 bg-gray-100 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-200 transition-colors dark:bg-gray-700 dark:text-gray-300">
        Mais barato
      </button>
      <button class="px-4 py-2 bg-gray-100 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-200 transition-colors dark:bg-gray-700 dark:text-gray-300">
        Mais longo
      </button>
      <button class="px-4 py-2 bg-gray-100 text-gray-700 rounded-full text-sm font-medium hover:bg-gray-200 transition-colors dark:bg-gray-700 dark:text-gray-300">
        Mais curto
      </button>
    </div>
  </div>

  <!-- Container do carrossel -->
  <div class="relative overflow-hidden">
    <div id="carousel-container" class="flex transition-transform duration-500 ease-in-out">
      {passeios.map((passeio) => (
        <div class="flex-none w-full sm:w-1/2 lg:w-1/3 xl:w-1/4 px-3">
          <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden group">
            <!-- Imagem do passeio -->
            <div class="relative h-48 overflow-hidden">
              <img 
                src={passeio.imagem} 
                alt={passeio.titulo}
                class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
              />
              <div class="absolute top-3 left-3">
                <span class="bg-primary-600 text-white text-xs font-medium px-2 py-1 rounded-full">
                  {passeio.categoria}
                </span>
              </div>
            </div>

            <!-- Conteúdo do card -->
            <div class="p-6">
              <!-- Título -->
              <h3 class="font-bold text-lg text-gray-900 dark:text-white mb-1">
                {passeio.titulo}
              </h3>
              <p class="text-gray-600 dark:text-gray-400 text-sm mb-3">
                {passeio.subtitulo}
              </p>

              <!-- Avaliação -->
              {passeio.avaliacao > 0 && (
                <div class="flex items-center gap-2 mb-4">
                  <div class="flex text-yellow-400">
                    {Array.from({
                      length: 5 }, (_, i) => (
                      <svg class={`w-4 h-4 ${i < Math.floor(passeio.avaliacao) ? 'fill-current' : i < passeio.avaliacao ? 'fill-current opacity-50' : 'text-gray-300'}`} viewBox="0 0 20 20">
                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                      </svg>
                    ))}
                  </div>
                  <span class="text-sm text-gray-600 dark:text-gray-400">
                    {passeio.avaliacao.toFixed(2)} de {passeio.totalAvaliacoes} avaliações
                  </span>
                </div>
              )}

              <!-- Tags -->
              <div class="space-y-2 mb-6">
                {passeio.tags.map((tag) => (
                  <div class="flex items-center text-sm text-gray-600 dark:text-gray-400">
                    <svg class="w-4 h-4 text-green-500 mr-2 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    {tag}
                  </div>
                ))}
              </div>

              <!-- Preço e botão -->
              <div class="border-t pt-4">
                <div class="flex items-center justify-between mb-4">
                  <div>
                    <p class="text-sm text-gray-500 dark:text-gray-400">A partir de</p>
                    <p class="text-2xl font-bold text-gray-900 dark:text-white">
                      {passeio.parcelas}x de R$ {passeio.preco.toFixed(2).replace('.', ',')}
                    </p>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Pague em até 10x sem juros</p>
                  </div>
                </div>
                
                <a 
                  href={`/${passeio.titulo.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}`}
                  class="w-full bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-4 rounded-lg transition-colors duration-200 block text-center"
                >
                  COMPRAR AGORA
                </a>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Controles de navegação - ocultos no mobile -->
    <button 
      id="prev-btn"
      class="absolute left-4 top-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 shadow-lg rounded-full p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors z-10 hidden sm:block"
    >
      <svg class="w-6 h-6 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    
    <button 
      id="next-btn"
      class="absolute right-4 top-1/2 -translate-y-1/2 bg-white dark:bg-gray-800 shadow-lg rounded-full p-3 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors z-10 hidden sm:block"
    >
      <svg class="w-6 h-6 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>

  <!-- Indicadores -->
  <div class="flex justify-center mt-8 space-x-2" id="indicators">
    {Array.from({ length: Math.ceil(passeios.length / 4) }, (_, i) => (
      <button 
        class={`w-3 h-3 rounded-full transition-colors ${
          i === 0 ? 'bg-primary-600' : 'bg-gray-300 dark:bg-gray-600'
        }`}
        data-slide={i}
      ></button>
    ))}
  </div>
</section>

<script>
  // Funcionalidade do carrossel
  let currentSlide = 0;
  const container = document.getElementById('carousel-container');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  const indicators = document.querySelectorAll('#indicators button');
  
  // Variáveis para touch/swipe
  let startX = 0;
  let currentX = 0;
  let isDragging = false;
  let startTime = 0;
  
  // Calcular quantos slides cabem na tela
  function getSlidesPerView() {
    const width = window.innerWidth;
    if (width >= 1280) return 4; // xl
    if (width >= 1024) return 3; // lg
    if (width >= 640) return 2;  // sm
    return 1; // mobile
  }
  
  function getTotalSlides() {
    return Math.ceil(8 / getSlidesPerView());
  }
  
  function updateCarousel() {
    const slidesPerView = getSlidesPerView();
    const totalSlides = getTotalSlides();
    const slideWidth = 100 / slidesPerView;
    const translateX = -currentSlide * slideWidth;
    container.style.transform = `translateX(${translateX}%)`;
    
    // Atualizar indicadores dinamicamente
    const indicatorsContainer = document.getElementById('indicators');
    indicatorsContainer.innerHTML = '';
    
    for (let i = 0; i < totalSlides; i++) {
      const indicator = document.createElement('button');
      indicator.className = `w-3 h-3 rounded-full transition-colors ${
        i === currentSlide ? 'bg-primary-600' : 'bg-gray-300 dark:bg-gray-600'
      }`;
      indicator.addEventListener('click', () => {
        currentSlide = i;
        updateCarousel();
      });
      indicatorsContainer.appendChild(indicator);
    }
  }
  
  function nextSlide() {
    const totalSlides = getTotalSlides();
    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
  }
  
  function prevSlide() {
    const totalSlides = getTotalSlides();
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
  }
  
  // Touch/Swipe handlers
  function handleTouchStart(e) {
    startX = e.touches[0].clientX;
    startTime = Date.now();
    isDragging = true;
    container.style.transition = 'none';
  }
  
  function handleTouchMove(e) {
    if (!isDragging) return;
    
    currentX = e.touches[0].clientX;
    const diffX = currentX - startX;
    const containerWidth = container.offsetWidth;
    const slideWidth = containerWidth / getSlidesPerView();
    
    // Calcular o deslocamento baseado no movimento do dedo
    const currentTranslate = -currentSlide * (100 / getSlidesPerView());
    const movePercent = (diffX / slideWidth) * (100 / getSlidesPerView());
    
    container.style.transform = `translateX(${currentTranslate + movePercent}%)`;
  }
  
  function handleTouchEnd(e) {
    if (!isDragging) return;
    
    isDragging = false;
    container.style.transition = 'transform 0.3s ease-in-out';
    
    const diffX = currentX - startX;
    const timeDiff = Date.now() - startTime;
    const velocity = Math.abs(diffX) / timeDiff;
    
    // Determinar se deve mudar de slide baseado na distância e velocidade
    const threshold = 50; // pixels mínimos para mudar slide
    const velocityThreshold = 0.3; // velocidade mínima
    
    if (Math.abs(diffX) > threshold || velocity > velocityThreshold) {
      if (diffX > 0) {
        prevSlide();
      } else {
        nextSlide();
      }
    } else {
      // Voltar para o slide atual
      updateCarousel();
    }
  }
  
  // Event listeners para botões (apenas em telas maiores)
  nextBtn?.addEventListener('click', nextSlide);
  prevBtn?.addEventListener('click', prevSlide);
  
  // Event listeners para touch/swipe
  container.addEventListener('touchstart', handleTouchStart, { passive: true });
  container.addEventListener('touchmove', handleTouchMove, { passive: true });
  container.addEventListener('touchend', handleTouchEnd, { passive: true });
  
  // Prevenir scroll horizontal no mobile durante o swipe
  container.addEventListener('touchmove', (e) => {
    if (isDragging) {
      e.preventDefault();
    }
  }, { passive: false });
  
  // Auto-play (pausar durante interação)
  let autoPlayInterval;
  
  function startAutoPlay() {
    autoPlayInterval = setInterval(() => {
      if (!isDragging) {
        nextSlide();
      }
    }, 5000);
  }
  
  function stopAutoPlay() {
    clearInterval(autoPlayInterval);
  }
  
  // Pausar auto-play durante interação
  container.addEventListener('touchstart', stopAutoPlay);
  container.addEventListener('touchend', () => {
    setTimeout(startAutoPlay, 3000); // Reiniciar após 3 segundos
  });
  
  // Inicializar
  updateCarousel();
  startAutoPlay();
  
  // Atualizar no resize
  window.addEventListener('resize', () => {
    currentSlide = 0; // Reset para o primeiro slide
    updateCarousel();
  });
</script>